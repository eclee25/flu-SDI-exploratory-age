#!/usr/bin/python

##############################################
###Python template
###Author: Elizabeth Lee
###Date:
###Function: 

###Import data: 

###Command Line: python 
##############################################


### notes ###


### packages ###
import matplotlib
import csv
import numpy as np
import matplotlib.pyplot as plt
from pylab import *

## local packages ##

### data structures ###
adult1, child1, adult3a, child3a, adult3b, child3b, y1, y3a, y3b =[],[],[],[],[],[],[],[],[]


### parameters ###
USchild = 20348657 + 20677194 + 22040343 #US child popn
USadult = 21585999 + 21101849 + 19962099 + 20179642 + 20890964 + 22708591 + 22298125 + 19664805 #US adult popn


### functions ###
def importer4 (csvreadfile, adultlist, childlist, ilicol):
	ct=0
	for row in csvreadfile:
		pwnum = # week number where attack rate is the greatest
		pwval = # highest attack rate of the season
		if row[1] == "A":
			adultlist.append(float(row[ilicol])/USadult)
		elif row[1] == "C":
			childlist.append(float(row[ilicol])/USchild)
		else:
			ct+=1

def ORgen (ylist, childlist, adultlist):
	for i in range(0,len(childlist)):
		ylist.append((childlist[i]/(1-childlist[i]))/(adultlist[i]/(1-adultlist[i])))
	print childlist[i], 1-childlist[i], adultlist[i], 1-adultlist[i]

def peakweek (csvreadfile, peakval, wkval, numval, peakwkval, yearct): # week numbers for peaks do not appear to be correct, 
	ct=0
	for row in csvreadfile:
		yr = int(row[2][:4])
		wknum = int(row[3])
		month = row[2][5:7]
		null = float(row[6])
		if ((yr==yr1vec[yearct] and wknum in firstyr and month != "01") or (yr==yr2vec[yearct] and wknum in nextyr)):
			ct+=1
			if null>peakval:
				peakval=float(row[6])
				wkval=row[2]
				numval=ct
				peakwkval=int(row[3])
	peak.append(peakval)
	weeks.append(wkval)
	peakwk_shifted.append(numval)
	peakwk.append(peakwkval) #not needed for plotting, just as a check

### import data ###
d1in=open('/home/elee/Dropbox/Elizabeth_Bansal_Lab/SDI_Data/SQL_export/odds_c_a1.csv','r')
d1=csv.reader(d1in, delimiter=',')


### program ###

# generate odds ratios for whole season
importer(d1, adult1, child1, 2)
ORgen(y1, child1, adult1)
































